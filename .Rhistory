available.packages()
install.packages("devtools")
#' Categorize Age Groups from Multiple Choice
#'
#' Categorizes respondents into children & youth, adult, older adult, or prefer not to say
#' from a multiple-choice age group variable.
#'
#' @param data A data frame
#' @param age_group_col Column name with age group responses
#' @param output_col Output column name
#' @param mapping Optional mapping table of raw to code
#' @param labels Named list of output labels
#' @return Data frame with categorized age group
#' @export
categ_age_groups <- function(data, age_group_col, output_col = "demographics_age_group",
mapping = NULL,
labels = list(
youth = "children & youth",
adult = "adult",
older = "older adult",
prefer_not_to_say = "prefer not to say",
missing = NA)) {
if (is.null(mapping)) {
mapping <- get_default_mapping("age_groups")
}
data[[output_col]] <- NA
for (i in seq_len(nrow(data))) {
val <- data[[age_group_col]][i]
if (is.na(val) || val == "") {
data[[output_col]][i] <- labels$missing
} else {
match_raw <- mapping$raw == val
match_code <- suppressWarnings(as.numeric(val)) == mapping$code
idx <- which(match_raw | match_code)
if (length(idx) == 1) {
if (idx == 8) {
data[[output_col]][i] <- labels$prefer_not_to_say
} else if (idx == 1) {
data[[output_col]][i] <- labels$youth
} else if (idx %in% 2:6) {
data[[output_col]][i] <- labels$adult
} else if (idx >= 7) {
data[[output_col]][i] <- labels$older
}
} else {
if (grepl("75|80|85|older", val, ignore.case = TRUE)) {
data[[output_col]][i] <- labels$older
} else {
data[[output_col]][i] <- labels$prefer_not_to_say
}
}
}
}
return(data)
}
View(categ_age_groups)
devtools::document
devtools::document()
get_default_mapping <- function(key = NULL) {
maps <- list(
income = tibble::tibble(
raw = c("Less than $20,000", "$20,000 to $24,999", "$25,000 to $29,999",
"$30,000 to $34,999", "$35,000 to $39,999", "$40,000 to $44,999",
"$45,000 to $49,999", "$50,000 to $54,999", "$55,000 to $59,999",
"$60,000 to $69,999", "$70,000 to $79,999", "$80,000 to $89,999",
"$90,000 to $99,999", "$100,000 to $149,999", "$150,000 or more",
"Prefer not to answer"),
code = c(1:15, "prefer not to answer")
),
newcomer = tibble::tibble(
raw = c("All my life", "10 years or more", "6 to 9 years", "1 to 5 years", "Less than 1 year", "Prefer not to answer"),
code = 1:6
),
age_groups = tibble::tibble(
raw = c("18-25", "25-34", "35-44", "45-54", "55-64", "65-74", "Over 74", "Prefer not to answer"),
code = 1:8
)
)
if (!is.null(key)) {
if (key %in% names(maps)) return(maps[[key]])
else stop("Unknown key for default mapping.")
}
return(maps)
}
get_default_mapping()
?recode
?dplyr::recode
rm(get_default_mapping())
?Documentation
devtools::document()
devtools::document()
library(pacsegmentr)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
